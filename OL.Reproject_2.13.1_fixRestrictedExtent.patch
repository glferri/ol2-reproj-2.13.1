 lib/OpenLayers/Layer.js         | 31 +++++++++++++++++++++
 lib/OpenLayers/Layer/Markers.js | 22 ++++++++++++++-
 lib/OpenLayers/Layer/Vector.js  | 27 +++++++++++++++++-
 lib/OpenLayers/Map.js           | 62 +++++++++++++++++++++++++++++++++++++----
 lib/OpenLayers/Marker.js        | 15 ++++++++++
 5 files changed, 149 insertions(+), 8 deletions(-)

diff --git a/lib/OpenLayers/Layer.js b/lib/OpenLayers/Layer.js
index 3bd4186..e1557b9 100644
--- a/lib/OpenLayers/Layer.js
+++ b/lib/OpenLayers/Layer.js
@@ -1081,6 +1081,37 @@ OpenLayers.Layer = OpenLayers.Class({
         return resolutions;
     },
 
+	    /**
+		* Method: adjustResolutions
+		* Attempts to adjust resolution options to that of a new base layer if
+		* originally copied from a base layer or the map object.
+		* This method is intended to be only used with marker and vector layers
+		* that need to adapt when the base layer changes.
+		*/
+		adjustResolutions: function(layer) {
+			var props = new Array(
+			'projection', 'units',
+			'scales', 'resolutions',
+			'maxScale', 'minScale',
+			'maxResolution', 'minResolution',
+			'minExtent', 'maxExtent',
+			'numZoomLevels', 'maxZoomLevel'
+			);
+		
+			// This is probably ugly - we clobber derived properties
+			for(var i=0, len=props.length; i < len; i++) {
+				if((this.options[props[i]] === undefined) && (this[props[i]])) {
+					var blProp = this.map.baseLayer[props[i]];
+					if(blProp.clone && (typeof blProp.clone == 'function')) {
+						this[props[i]] = blProp.clone();
+					} else {
+						this[props[i]] = blProp;
+					}
+				}
+			}
+		},
+	
+	
     /**
      * APIMethod: getResolution
      * 
diff --git a/lib/OpenLayers/Layer/Markers.js b/lib/OpenLayers/Layer/Markers.js
index de848d49..8d3f56f 100644
--- a/lib/OpenLayers/Layer/Markers.js
+++ b/lib/OpenLayers/Layer/Markers.js
@@ -182,6 +182,26 @@ OpenLayers.Layer.Markers = OpenLayers.Class(OpenLayers.Layer, {
 
         return maxExtent;
     },
-
+	
+	/* APIMethod: transform
+	* Transform the Markers layer from source to dest projection.
+	*
+	* Parameters:
+	* source - {<OpenLayers.Projection>} Source projection.
+	* dest   - {<OpenLayers.Projection>} Destination projection.
+	*
+	* Returns:
+	* {<OpenLayers.Layer.Markers>} Itself, for use in chaining operations.
+	*/
+	transform: function(source, dest) {
+		for(var i=0; i < this.markers.length; i++) {
+			var marker = this.markers[i];
+			marker.transform(source, dest);
+		}
+		this.adjustResolutions();
+		this.redraw();
+		return this;
+	},
+	
     CLASS_NAME: "OpenLayers.Layer.Markers"
 });
diff --git a/lib/OpenLayers/Layer/Vector.js b/lib/OpenLayers/Layer/Vector.js
index 4ef4cbf..bedef70 100644
--- a/lib/OpenLayers/Layer/Vector.js
+++ b/lib/OpenLayers/Layer/Vector.js
@@ -699,6 +699,31 @@ OpenLayers.Layer.Vector = OpenLayers.Class(OpenLayers.Layer, {
             this.events.triggerEvent("featuresremoved", {features: features});
         }
     },
+	
+	/**
+	* APIMethod: transform
+	* Transform the Vector layer from source to dest projection.
+	* * Please note that you may have to manually change other
+	* options such as resolutions to get the layer to display as
+	* you intend on a base layer (see adjustResolutions())
+	*
+	* Parameters:
+	* source - {<OpenLayers.Projection>} Source projection.
+	* dest   - {<OpenLayers.Projection>} Destination projection.
+	*
+	* Returns:
+	* {<OpenLayers.Layer.Vector>} Itself, for use in chaining operations.
+	*/
+	transform: function(source, dest) {
+		for(var i=0; i < this.features.length; i++) {
+			var feature = this.features[i];
+			feature.geometry.transform(source, dest);
+		}
+		this.projection = dest;
+		this.adjustResolutions();
+		this.redraw();
+		return this;
+	},
     
     /** 
      * APIMethod: removeAllFeatures
@@ -1002,6 +1027,6 @@ OpenLayers.Layer.Vector = OpenLayers.Class(OpenLayers.Layer, {
         }
         return maxExtent;
     },
-
+	
     CLASS_NAME: "OpenLayers.Layer.Vector"
 });
diff --git a/lib/OpenLayers/Map.js b/lib/OpenLayers/Map.js
index 56763fa..bf81a66 100644
--- a/lib/OpenLayers/Map.js
+++ b/lib/OpenLayers/Map.js
@@ -1278,6 +1278,16 @@ OpenLayers.Map = OpenLayers.Class({
      */
     setBaseLayer: function(newBaseLayer) {
         
+		       
+		var oldExtent = null;
+		var oldRestrictedExtent = null;
+		var oldProjection = null;
+		if (this.baseLayer) {
+			oldExtent = this.baseLayer.getExtent();
+			oldRestrictedExtent = this.restrictedExtent;
+			oldProjection = this.getProjectionObject();
+		}
+		
         if (newBaseLayer != this.baseLayer) {
           
             // ensure newBaseLayer is already loaded
@@ -1305,15 +1315,55 @@ OpenLayers.Map = OpenLayers.Class({
                         this.baseLayer.redraw();
                     }
                 }
-
+				
+				var center = this.getCenter();
+				
                 // recenter the map
                 if (center != null) {
-                    // new zoom level derived from old scale
-                    var newZoom = this.getZoomForResolution(
-                        newResolution || this.resolution, true
-                    );
+                    
+					//either get the center from the old Extent or just from
+					// the current center of the map.
+					var newCenter = (oldExtent)
+						? oldExtent.getCenterLonLat()
+						: center;
+					
+					var newExtent = oldExtent.clone();
+					var newRestrictedExtent = oldRestrictedExtent? oldRestrictedExtent.clone():null;
+					
+					// Convert centre point to new layer projection - so we can
+					// maintain roughly the same view
+					var newProjection = this.getProjectionObject();
+					if(!oldProjection.equals(newProjection)) {
+						newCenter.transform(oldProjection, newProjection);
+						newExtent.transform(oldProjection, newProjection);
+						if (newRestrictedExtent) {
+							newRestrictedExtent.transform(oldProjection, newProjection);
+						}
+					}
+					
+					this.restrictedExtent = newRestrictedExtent;
+					
+					//the new zoom will either come from the converted old
+					// Extent or from the current resolution of the map
+					var newZoom = (newExtent)
+						? this.getZoomForExtent(newExtent, true)
+						: this.getZoomForResolution(newResolution || this.resolution, true);
+				
+				
                     // zoom and force zoom change
-                    this.setCenter(center, newZoom, false, true);
+                    this.setCenter(newCenter, newZoom, false, true);
+					
+					if(!oldProjection.equals(newProjection)) {
+						// Also convert vector layers - assuming they are in the
+						// same projection as the original baseLayer - we cannot
+						// trust the projection property all the time as it is
+						// used as a shortcut for externalProjection
+						for (var l=0, len=this.layers.length; l < len; l++) {
+							if(this.layers[l].transform && (typeof this.layers[l].transform == 'function')) {
+								this.layers[l].transform(oldProjection, newProjection);
+							}
+						}
+					}
                 }
 
                 this.events.triggerEvent("changebaselayer", {
diff --git a/lib/OpenLayers/Marker.js b/lib/OpenLayers/Marker.js
index 1dde347..81f229a 100644
--- a/lib/OpenLayers/Marker.js
+++ b/lib/OpenLayers/Marker.js
@@ -212,6 +212,21 @@ OpenLayers.Marker = OpenLayers.Class({
         this.icon.setUrl(url);
     },    
 
+	/* APIMethod: transform
+	* Transform the Marker object from source to dest projection.
+	*
+	* Parameters:
+	* source  - {<OpenLayers.Projection>} Source projection.
+	* dest    - {<OpenLayers.Projection>} Destination projection.
+	*
+	* Returns:
+	* {<OpenLayers.Marker>} Itself, for use in chaining operations.
+	*/
+	transform: function(source, dest) {
+		this.lonlat.transform(source, dest);
+		return this;
+	},
+	
     /** 
      * Method: display
      * Hide or show the icon
